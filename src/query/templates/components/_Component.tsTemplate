import * as React from 'react';
import { View, Text } from 'react-native';
import { Query } from 'react-apollo';
import { <%= queryName %> } from '../query/<%= queryName %>Query';

class <%= queryName %>Query extends Query<Get<%= queryName %>Query, Get<%= queryName %>QueryVariables> {}

// TODO: DELETE? Should be generated
interface Get<%= queryName %>Query {
  someObjectFromResolver: {
    propertyA: string;
  };
}

// TODO: DELETE? Should be generated
interface Get<%= queryName %>QueryVariables {
  inputVarA: string;
}

// This is set from outide ex <<%= componentName %>Component componentPropA='xxx'/>
interface IProps {
  componentPropA: string;
}

export const <%= componentName %>ComponentPure = ({ someObjectFromResolver }: Get<%= queryName %>Query) => (
  <View>
    <Text>myComponent</Text>
  </View>
);

export default class <%= componentName %>Component extends React.SFC<IProps> {
  render() {
    return (
      <<%= queryName %>Query query={<%= queryName %>} variables={{ inputVarA: '2' }}>
        {({ loading, data, error }) => {
          if (loading) return <Text>Loading</Text>;
          if (error) return <Text>Error: {error}</Text>;
          if (!data) return <Text>No Data</Text>;

          return <<%= componentName %>ComponentPure someObjectFromResolver={data.someObjectFromResolver} />;
        }}
      </<%= queryName %>Query>
    );
  }
}